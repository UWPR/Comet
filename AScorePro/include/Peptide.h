#pragma once

#include <string>
#include <vector>
#include "API.h"
#include "PeptideMods.h"
#include "PeakMatch.h"

namespace AScoreProCpp {

    class ASCORE_API Peptide {
    public:
        Peptide();

        /**
         * Creates a copy of this peptide
         */
        Peptide clone() const;

        /**
         * Serializes peptide with flanking residues and mod symbols.
         */
        std::string toString() const;

        // Getters and setters
        int getId() const;
        void setId(int id);

        int getScanNumber() const;
        void setScanNumber(int scanNumber);

        double getPrecursorMz() const;
        void setPrecursorMz(double precursorMz);

        double getScore() const;
        void setScore(double score);

        char getLeftFlank() const;
        void setLeftFlank(char leftFlank);

        char getRightFlank() const;
        void setRightFlank(char rightFlank);

        PeptideMods& getMods();
        const PeptideMods& getMods() const;
        void setMods(const PeptideMods& mods);

        int getIonsTotal() const;
        void setIonsTotal(int ionsTotal);

        int getIonsMatched() const;
        void setIonsMatched(int ionsMatched);

        int getGeneratorIndex() const;
        void setGeneratorIndex(int generatorIndex);

        std::vector<PeakMatch>& getMatches();
        const std::vector<PeakMatch>& getMatches() const;
        void setMatches(const std::vector<PeakMatch>& matches);

        std::vector<int>& getMatchesByDepth();
        const std::vector<int>& getMatchesByDepth() const;
        void setMatchesByDepth(const std::vector<int>& matchesByDepth);

        const std::string& getSequence() const;
        void setSequence(const std::string& sequence);

        const std::string& getAnnotatedSequence() const;
        void setAnnotatedSequence(const std::string& annotatedSequence);

    private:
        /**
         * A unique number used to identify the peptide.
         */
        int id_;

        /**
         * The scan number for the peptide
         */
        int scanNumber_;

        /**
         * Peptide precursor m/z
         */
        double precursorMz_;

        /**
         * Scoring result
         */
        double score_;

        /**
         * Residue to the left of the peptide.
         */
        char leftFlank_;

        /**
         * Residue to the right of the peptide.
         */
        char rightFlank_;

        /**
         * Diff mods present on the peptide.
         */
        PeptideMods mods_;

        /**
         * Total number of fragment ions generated by the peptide.
         */
        int ionsTotal_;

        /**
         * Count of matched fragment ions.
         */
        int ionsMatched_;

        /**
         * Index of mod arrangements.
         */
        int generatorIndex_;

        /**
         * Stores information from matched peaks.
         */
        std::vector<PeakMatch> matches_;

        /**
         * Stores counts of matches from each peak depth.
         */
        std::vector<int> matchesByDepth_;

        /**
         * Amino acid sequence.
         */
        std::string sequence_;

        /**
         * Annotated sequence with flanking residues and modification symbols.
         */
        std::string annotatedSequence_;
    };

} // namespace AScoreProCpp